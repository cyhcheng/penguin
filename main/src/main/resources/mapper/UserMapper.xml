<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.penguin.project.tutorial.dao.UserMapper">

    <resultMap id="baseResult" type="org.penguin.project.tutorial.domain.User">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="fullname" property="fullname" jdbcType="VARCHAR"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="findAll" resultMap="baseResult">
        SELECT id, fullname, account, password, email, mobile, gender, description, create_time, update_time FROM users
    </select>

    <select id="findByEmail" resultMap="baseResult"  parameterType="org.penguin.project.tutorial.domain.User">
        SELECT id, fullname, account, password, email, mobile, gender, description, create_time, update_time FROM users where email = #{email}
    </select>

    <select id="findByAccount" resultMap="baseResult" parameterType="org.penguin.project.tutorial.domain.User">
        SELECT id, fullname, account, password, email, mobile, gender, description, create_time, update_time FROM users where account= #{account}
    </select>

    <select id="findByAccountOrEmail" resultMap="baseResult" parameterType="org.penguin.project.tutorial.domain.User">
        SELECT id, fullname, account, password, email, mobile, gender, description, create_time, update_time FROM users where email = #{email} or account= #{account}
    </select>

    <select id="existByAccount" resultType="Boolean" parameterType="org.penguin.project.tutorial.domain.User">
        select exists (SELECT 1 FROM users where account= #{account})
    </select>

    <select id="existByEmail" resultType="Boolean"  parameterType="org.penguin.project.tutorial.domain.User">
-- select exists (SELECT 1 FROM users where email= #{email})
-- select case when Count(id)>0 then true else false end from users where email= #{email})
select coalesce ((select 1 from users where email= #{email})
    </select>

    <insert id="insert" parameterType="org.penguin.project.tutorial.domain.User">
        insert into users(id,fullname,account,password,email,mobile,description) values(#{id},#{fullname},#{account},#{password},#{email},#{mobile},#{description})
    </insert>

</mapper>